{"version":3,"sources":["components/FormCIty.js","components/AddToCompare.js","components/NavbarComp.js","components/WeatherCard.js","components/WeatherGroup.js","helpers/helpersFunctions.js","App.js","serviceWorker.js","index.js","components/WeatherCard.module.css"],"names":["ValidationSchema","yup","shape","city","min","matches","required","country","FormCity","_ref","onSubmit","closeModal","react_default","a","createElement","formik_esm","validationSchema","initialValues","values","_ref2","handleSubmit","handleChange","handleBlur","errors","touched","Form_default","className","Row","Col_default","Group","controlId","Label","Control","name","type","placeholder","onChange","value","onBlur","isInvalid","Feedback","Button_default","variant","block","defaultProps","AddToCompare","addToCompare","_useState","useState","_useState2","Object","slicedToArray","show","setShow","handleClose","Fragment","size","onClick","Modal_default","onHide","Header","closeButton","Title","Body","FormCIty","NavbarComp","canCompare","Navbar_default","bg","Container_default","Brand","href","components_AddToCompare","WeatherCard","weather","Card_default","styles","card","weatherIconWrapper","weatherIcon","src","concat","iconCode","alt","dayOfWeek","Row_default","Text","avgTemp","minTemp","maxTemp","avgClouds","avgWind","avgHumidity","WeatherGroup","map","oneDayOfWeather","key","uuid","lg","md","xs","components_WeatherCard","API_KEY","getWeatherCity","URL","axios","get","then","res","catch","err","getWeatherGeoLoc","lat","lon","roundToDigits","num","digits","Number","Math","round","calcAvg","array","reduce","acc","cV","length","getDataToDisplay","days","day","apiDataDay","icon","objectSpread","moment","dt","format","temps","data","main","temp","max","apply","toConsumableArray","wind","speed","humidity","clouds","all","condensedDayConditions","dataProvider","rawData","listOfDays","0","1","2","3","4","numberOfDays","keys","starterIndex","starterDay","Date","getDay","forEach","row","dayOfRow","push","addDataToDays","formattedDataToComponent","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","list","abrupt","t0","errorMsg","stop","_x","this","arguments","App","state","weatherCompare","cityCompare","isGeoLoc","errorMsgCompare","handleSubmitReceiveWeather","Help","_this","setState","handleSubmitCompareWeather","_callee2","_context2","getWeatherFromGeoLoc","logPosition","_ref3","_callee3","pos","_context3","coords","latitude","longitude","_x3","navigator","geolocation","getCurrentPosition","error","timeout","maximumAge","_this$state","components_NavbarComp","Alert_default","components_WeatherGroup","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.dc0d2312.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport propTypes from \"prop-types\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nconst ValidationSchema = yup.object().shape({\r\n  city: yup\r\n    .string()\r\n    .min(2, \"Too short city name\")\r\n    .matches(/(^[a-zA-ZĄĆĘŁŃÓŚŹŻąćęłńóśźż\\s]{2,}$)/i, \"Invalid city name\")\r\n    .required(\"This field is required\"),\r\n  country: yup\r\n    .string()\r\n    .min(2, \"Too short country name\")\r\n    .matches(/(^[a-zA-ZĄĆĘŁŃÓŚŹŻąćęłńóśźż\\s]{2,}$)/i, \"Invalid country name\")\r\n    .required(\"This field is required\"),\r\n});\r\n\r\nconst FormCity = ({ onSubmit, closeModal }) => (\r\n  <Formik\r\n    validationSchema={ValidationSchema}\r\n    initialValues={{\r\n      city: \"\",\r\n      country: \"\",\r\n    }}\r\n    onSubmit={(values) => {\r\n      onSubmit(values);\r\n      if (closeModal) {\r\n        closeModal();\r\n      }\r\n    }}\r\n  >\r\n    {({ handleSubmit, handleChange, values, handleBlur, errors, touched }) => (\r\n      <Form onSubmit={handleSubmit} className=\"m-3\">\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group controlId=\"formCity\">\r\n              <Form.Label>City</Form.Label>\r\n              <Form.Control\r\n                name=\"city\"\r\n                type=\"text\"\r\n                placeholder=\"Enter city\"\r\n                onChange={handleChange}\r\n                value={values.city}\r\n                onBlur={handleBlur}\r\n                isInvalid={errors.city && touched.city}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.city}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Form.Group controlId=\"formCountry\">\r\n              <Form.Label>Country</Form.Label>\r\n              <Form.Control\r\n                name=\"country\"\r\n                type=\"text\"\r\n                placeholder=\"Enter country\"\r\n                onChange={handleChange}\r\n                value={values.country}\r\n                onBlur={handleBlur}\r\n                isInvalid={errors.country && touched.country}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.country}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Button type=\"submit\" variant=\"secondary\" block>\r\n          Get Weather\r\n        </Button>\r\n      </Form>\r\n    )}\r\n  </Formik>\r\n);\r\nexport default FormCity;\r\n\r\nFormCity.propTypes = {\r\n  onSubmit: propTypes.func.isRequired,\r\n  closeModal: propTypes.func,\r\n};\r\n\r\nFormCity.defaultProps = {\r\n  closeModal: null,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport FormCity from \"./FormCIty\";\r\n\r\nconst AddToCompare = ({ addToCompare }) => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"light\" size=\"sm\" onClick={handleShow}>\r\n        City comparison\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add city to compare the weather</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FormCity closeModal={handleClose} onSubmit={addToCompare} />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddToCompare;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport AddToCompare from \"./AddToCompare\";\r\n\r\nconst NavbarComp = ({ addToCompare, canCompare }) => (\r\n  <Navbar bg=\"dark\" className=\"mb-1\">\r\n    <Container className=\"d-flex justify-content-between\">\r\n      <Navbar.Brand className=\"text-white\" href=\"#home\">\r\n        weatherApp\r\n      </Navbar.Brand>\r\n      {canCompare && <AddToCompare addToCompare={addToCompare} />}\r\n    </Container>\r\n  </Navbar>\r\n);\r\n\r\nexport default NavbarComp;\r\n\r\nNavbarComp.propTypes = {\r\n  addToCompare: PropTypes.func.isRequired,\r\n  canCompare: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nimport styles from \"./WeatherCard.module.css\";\r\n\r\nconst WeatherCard = ({ weather }) => (\r\n  <Card className={styles.card}>\r\n    <div className={styles.weatherIconWrapper}>\r\n      <img\r\n        className={styles.weatherIcon}\r\n        src={`http://openweathermap.org/img/wn/${weather.iconCode}@2x.png`}\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n    <Card.Body className=\"p-2 p-sm-4\">\r\n      <Card.Title className=\"text-center\">{weather.dayOfWeek}</Card.Title>\r\n      <Row className=\"d-flex justify-content-center m-0\">\r\n        {/* <Card.Text className=\"m-0\">Avg. </Card.Text> */}\r\n        <Card.Text className=\"m-0 font-weight-bold\">\r\n          {weather.avgTemp} °C\r\n        </Card.Text>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-between m-0\">\r\n        <Card.Text className=\"m-0\">Min. </Card.Text>\r\n        <Card.Text className=\"m-0\">{weather.minTemp} °C</Card.Text>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-between m-0\">\r\n        <Card.Text className=\"m-0\">Max. </Card.Text>\r\n        <Card.Text className=\"m-0\">{weather.maxTemp} °C</Card.Text>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-between mt-1 mx-0\">\r\n        <Card.Text className=\"m-0\">Clouds </Card.Text>\r\n        <Card.Text className=\"m-0\">{weather.avgClouds} % </Card.Text>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-between mt-1 mx-0\">\r\n        <Card.Text className=\"m-0\">Wind </Card.Text>\r\n        <Card.Text className=\"m-0\">{weather.avgWind} m/s </Card.Text>\r\n      </Row>\r\n      <Row className=\"d-flex justify-content-between mt-1 mx-0\">\r\n        <Card.Text className=\"m-0\">Humid.</Card.Text>\r\n        <Card.Text className=\"m-0\">{weather.avgHumidity} % </Card.Text>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nexport default WeatherCard;\r\n\r\nWeatherCard.propTypes = {\r\n  weather: propTypes.shape({\r\n    avgClouds: propTypes.number,\r\n    avgHumidity: propTypes.number,\r\n    avgTemp: propTypes.number,\r\n    avgWind: propTypes.number,\r\n    maxTemp: propTypes.number,\r\n    minTemp: propTypes.number,\r\n    dayOfWeek: propTypes.string,\r\n    iconCode: propTypes.string,\r\n  }).isRequired,\r\n};\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport uuid from \"uuid\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst WeatherGroup = ({ weather }) => (\r\n  <Row>\r\n    {weather.map((oneDayOfWeather) => (\r\n      <Col key={uuid()} lg md={4} xs={6}>\r\n        <WeatherCard weather={oneDayOfWeather} />\r\n      </Col>\r\n    ))}\r\n  </Row>\r\n);\r\n\r\nexport default WeatherGroup;\r\n\r\nWeatherGroup.propTypes = {\r\n  weather: propTypes.arrayOf(propTypes.object).isRequired,\r\n};\r\n","import axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nexport const API_KEY = \"2d3f3209d60edcc35fc7d1abb01d7cb0\";\r\n\r\nexport const getWeatherCity = (city, country) => {\r\n  const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=metric&appid=${API_KEY}`;\r\n  return axios\r\n    .get(URL)\r\n    .then((res) => res)\r\n    .catch((err) => err);\r\n};\r\n\r\nexport const getWeatherGeoLoc = (lat, lon) => {\r\n  const URL = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;\r\n  return axios\r\n    .get(URL)\r\n    .then((res) => res)\r\n    .catch((err) => err);\r\n};\r\n\r\n/* eslint-disable */\r\nexport const roundToDigits = (num, digits) =>\r\n  Number(Math.round(num + \"e\" + digits) + \"e-\" + digits);\r\n/* eslint-disable */\r\n\r\nexport const calcAvg = (array) =>\r\n  array.reduce((acc, cV) => acc + cV) / array.length;\r\n\r\n// export const getDayFromTimestamps =\r\n/* eslint-disable */\r\n\r\nexport const addDataToDays = (listOfDays) => {\r\n  let days = {\r\n    0: [],\r\n    1: [],\r\n    2: [],\r\n    3: [],\r\n    4: [],\r\n  };\r\n\r\n  const numberOfDays = Object.keys(days).length;\r\n  let starterIndex = 0;\r\n  let starterDay = new Date(listOfDays[0].dt * 1000).getDay();\r\n\r\n  listOfDays.forEach((row) => {\r\n    const dayOfRow = new Date(row.dt * 1000).getDay();\r\n    if (dayOfRow != starterDay) {\r\n      starterIndex++;\r\n      starterDay = dayOfRow;\r\n    }\r\n    if (starterIndex < numberOfDays) {\r\n      days[starterIndex].push(row);\r\n    }\r\n  });\r\n  return days;\r\n};\r\n\r\n// find min, find max, calc total parameter avg on each day\r\nexport const condensedDayConditions = (apiDataDay) => {\r\n  //Whole day`s array of temperatures\r\n  const temps = apiDataDay.map((data) => data.main.temp);\r\n\r\n  const maxTemp = roundToDigits(Math.max(...temps), 0);\r\n  const minTemp = roundToDigits(Math.min(...temps), 0);\r\n  const avgWind = roundToDigits(\r\n    calcAvg(apiDataDay.map((data) => data.wind.speed)),\r\n    1,\r\n  );\r\n  const avgHumidity = roundToDigits(\r\n    calcAvg(apiDataDay.map((data) => data.main.humidity)),\r\n    0,\r\n  );\r\n  const avgClouds = roundToDigits(\r\n    calcAvg(apiDataDay.map((data) => data.clouds.all)),\r\n    0,\r\n  );\r\n  return { maxTemp, minTemp, avgHumidity, avgClouds, avgWind };\r\n};\r\n\r\nexport const getAvgTemp = (apiDataDay) => {\r\n  const timeOfDayNow = 0;\r\n  const timeOfDayMidday = 4;\r\n  let avgTemp;\r\n  if (apiDataDay.length < 8) {\r\n    avgTemp = roundToDigits(apiDataDay[timeOfDayNow].main.temp, 0);\r\n  } else {\r\n    avgTemp = roundToDigits(apiDataDay[timeOfDayMidday].main.temp, 0);\r\n  }\r\n  return avgTemp;\r\n};\r\n\r\nexport const getDataToDisplay = (days) =>\r\n  Object.values(days).map((day) => {\r\n    const maxNumberOfDataPerDay = 8;\r\n    const iconCode =\r\n      day.length < maxNumberOfDataPerDay\r\n        ? day[0].weather[0].icon\r\n        : day[5].weather[0].icon;\r\n    return {\r\n      iconCode,\r\n      dayOfWeek: moment(day[0].dt * 1000).format(\"dddd\"),\r\n      ...condensedDayConditions(day),\r\n      avgTemp: getAvgTemp(day),\r\n    };\r\n  });\r\n\r\nexport const dataProvider = (rawData) => {\r\n  let days = addDataToDays(rawData);\r\n  let data = getDataToDisplay(days);\r\n  return data;\r\n};\r\n\r\nexport const formattedDataToComponent = async (values) => {\r\n  try {\r\n    const data = await getWeatherCity(values.city, values.country);\r\n    const weather = dataProvider(data.data.list);\r\n    const city = data.data.city.name;\r\n    return { err: false, weather, city };\r\n  } catch (error) {\r\n    return { err: true, errorMsg: \"Couldn't get weather, check spelling\" };\r\n  }\r\n};\r\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Alert from \"react-bootstrap/Alert\";\nimport FormCity from \"./components/FormCIty\";\nimport NavbarComp from \"./components/NavbarComp\";\nimport WeatherGroup from \"./components/WeatherGroup\";\nimport * as Help from \"./helpers/helpersFunctions\";\n\nclass App extends React.Component {\n  state = {\n    weather: [],\n    weatherCompare: [],\n    city: \"\",\n    cityCompare: \"\",\n    isGeoLoc: true,\n    errorMsg: \"\",\n    errorMsgCompare: \"\",\n  };\n\n  componentDidMount() {\n    this.getWeatherFromGeoLoc();\n  }\n\n  handleSubmitReceiveWeather = async (values) => {\n    const data = await Help.formattedDataToComponent(values);\n    if (data.err) {\n      this.setState({\n        weather: [],\n        city: \"\",\n        errorMsg: data.errorMsg,\n      });\n    } else {\n      this.setState({\n        weather: data.weather,\n        city: data.city,\n        errorMsg: \"\",\n        isGeoLoc: false,\n      });\n    }\n  };\n\n  handleSubmitCompareWeather = async (values) => {\n    const data = await Help.formattedDataToComponent(values);\n    if (data.err) {\n      this.setState({\n        weatherCompare: [],\n        cityCompare: \"\",\n        errorMsgCompare: data.errorMsg,\n      });\n    } else {\n      this.setState({\n        weatherCompare: data.weather,\n        cityCompare: data.city,\n        errorMsgCompare: \"\",\n      });\n    }\n  };\n\n  getWeatherFromGeoLoc = () => {\n    const options = {\n      timeout: 3000,\n      maximumAge: 0,\n    };\n    const logPosition = async (pos) => {\n      const data = await Help.getWeatherGeoLoc(\n        pos.coords.latitude,\n        pos.coords.longitude,\n      );\n\n      const weather = Help.dataProvider(data.data.list);\n      this.setState({ weather, city: data.data.city.name });\n    };\n    const logError = (error) => {\n      this.setState({ isGeoLoc: false });\n      return error;\n    };\n    navigator.geolocation.getCurrentPosition(logPosition, logError, options);\n  };\n\n  render() {\n    const {\n      weather,\n      city,\n      isGeoLoc,\n      errorMsg,\n      weatherCompare,\n      errorMsgCompare,\n      cityCompare,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <NavbarComp\n          canCompare={city}\n          addToCompare={this.handleSubmitCompareWeather}\n        />\n        <Container>\n          <Row className=\"justify-content-center\">\n            <FormCity onSubmit={this.handleSubmitReceiveWeather} />\n          </Row>\n          {isGeoLoc && city && (\n            <Alert variant=\"secondary\" className=\"text-center\">\n              Forecast weather based on geolocation -{\" \"}\n              <span className=\"font-weight-bold\">{city}</span>\n            </Alert>\n          )}\n          {city && !isGeoLoc && (\n            <Alert variant=\"secondary\" className=\"text-center\">\n              Forecast weather based on user Input -{\" \"}\n              <span className=\"font-weight-bold\">{city}</span>\n            </Alert>\n          )}\n          {errorMsg && (\n            <Alert variant=\"danger\" className=\"text-center\">\n              {errorMsg}\n            </Alert>\n          )}\n          {weather && <WeatherGroup weather={weather} />}\n\n          {errorMsgCompare && (\n            <Alert variant=\"danger\" className=\"text-center\">\n              {errorMsgCompare}\n            </Alert>\n          )}\n          {cityCompare && (\n            <Alert variant=\"secondary\" className=\"text-center\">\n              Forecast weather based on user Input -{\" \"}\n              <span className=\"font-weight-bold\">{cityCompare}</span>\n            </Alert>\n          )}\n          {weatherCompare && <WeatherGroup weather={weatherCompare} />}\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherIconWrapper\":\"WeatherCard_weatherIconWrapper__NA697\",\"card\":\"WeatherCard_card__3UZLx\"};"],"sourceRoot":""}